 Marker interface::



The marker interface is a design pattern, used with languages that provide run-time type information about objects.
 It provides a way to associate metadata with a class where the language does not have explicit support 
for such metadata. To use this pattern, a class implements a marker interface, and code that interact
 with instances of that class test for the existence of the interface.
 Whereas a typical interface specifies functionality (in the form of method declarations) 
that an implementing class must support, a marker interface need not do so.


java.io.Serializable :- 

Serializability of a class is enabled by the class implementing the
 java.io.Serializable interface. Classes that do not implement this interface will not have
 any of their state serialized or deserialized. All subtypes of a serializable class are
 themselves serializable. The serialization interface has no methods or fields and serves 
only to identify the semantics of being serializable.



java.rmi.Remote: -
 The Remote interface serves to identify interfaces whose methods may be invoked
 from a non-local virtual machine. Any object that is a remote object must directly or indirectly 
implement this interface. Only those methods specified in a "remote interface", an interface that 
extends java.rmi.Remote are available remotely.


java.lang.Cloneable:-
  A class implements the Cloneable interface to indicate to the Object.clone() method
 that it is legal for that method to make a field-for-field copy of instances of that class.
 Invoking Object's clone method on an instance that does not implement the Cloneable interface results
 in the exception CloneNotSupportedException being thrown.


javax.servlet.SingleThreadModel: -
 Ensures that servlets handle only one request at a time.
 This interface has no methods.


java.util.EvenListener: - A tagging interface that all event listener interfaces must extend.
 